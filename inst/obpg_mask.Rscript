# This script documents the preparation of land/sea masks for OBPG datasets
# Masks are computed by taking the mean of 5 (or possibly more) year means
# served by OBPG - we use sst but there might be a better choice. In theory,
# taking the mean of a number of years will mitigate missing data issues.

library(raster)
library(spnc)
library(celmap)

# location of destination data
PATH    = "/mnt/ecocast/coredata/obpg"
# regions in addition to 'world'
REG = c("nwa", "gom")
# resolutions
REZ     = c("4km", "9km")


BASEURI = "https://oceandata.sci.gsfc.nasa.gov:443/opendap/MODISA/L3SMI"
URI     = file.path(BASEURI, c(
            '2013' = "2013/001/A20130012013365.L3m_YR_SST_sst_4km.nc",
            '2014' = "2014/001/A20140012014365.L3m_YR_SST_sst_4km.nc",
            '2015' = "2015/001/A20150012015365.L3m_YR_SST_sst_4km.nc",
            '2016' = "2016/001/A20160012016366.L3m_YR_SST_sst_4km.nc",
            '2017' = "2017/001/A20170012017365.L3m_YR_SST_sst_4km.nc"))


#' Get the uri by resolution
#'
#' @param r the resolution string "4km" or "9km"
#' @param uri the base uri of opendap files used to create the mask
#' @return updated uri
get_uri <- function(r = REZ[1], uri = URI){
    if (r[1] != "4km"){
        uri = gsub("4km", r, uri, fixed = TRUE)
    }
    uri
}


#' Given URI's get a raster stack
#'
#' @param uri uri of opendap resources
#' @return raster stack
get_stack <- function(uri = get_uri()){

    raster::stack(lapply(uri,
        function(u) {
            (SPNC(u))$get_raster("sst")
        }))

}

#' Get mask of 0 = land, 1 = ocean
#' @param rez the resolution (default "4km")
#' @return raster
get_mask <- function(rez = REZ[1]){
    s = get_stack(uri = get_uri(rez))
    m <- mean(s, na.rm = TRUE)
    mv <- getValues(m)
    mv[!is.na(mv)] <- 1
    m <- setValues(m, mv)
    m
}


for (rez in REZ) {

    m = get_mask(rez = rez)
    m = writeRaster(m, file.path(PATH, "world", "mask", paste0("mask_", rez, ".grd")),
        overwrite = TRUE)
    for (reg in REG) {
       cat(sprintf("rez = %s and reg = %s", rez, reg), "\n")
       ok  = raster::crop(m,celmap::get_bb(reg),
            filename = file.path(PATH, reg, "mask",paste0("mask_", rez, ".grd")),
            overwrite = TRUE)
    }
}
